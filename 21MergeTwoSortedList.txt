21. Merge Two Sorted Lists

You are given the heads of two sorted linked lists list1 and list2.Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:
Input: list1 = [], list2 = []
Output: []
Example 3:
Input: list1 = [], list2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        fin=ListNode()
        if(list1.val>list2.val):
            fin=ListNode(list2.val)
            list2=list2.next
        else:
            fin=ListNode(list1.val)
            list1=list1.next
        while (list1 is not None )and (list2 is not None):
            if(list1.val<list2.val):
                k=ListNode(list1.val)
                fin.next=k
                fin=fin.next
                list1=list1.next
            elif(list1.val==list2.val):
                k=ListNode(list1.val)
                fin.next=k
                fin=fin.next
                fin.next=k
                fin=fin.next
                list1=list1.next
                list2=list2.next
            elif(list1.val>list2.val):
                k=ListNode(list2.val)
                fin.next=k
                fin=fin.next
                list2=list2.next
        return fin
                



























 def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        list1, list2 = None, None
        
        if l1 == None and l2 == None:
            return None
        elif l1 == None and l2 != None:
            return l2
        elif l2 == None and l1 != None:
            return l1
        if l1.val <= l2.val:
            list1 = l1
            list2 = l2
        else:
            list2 = l1
            list1 = l2
        
        ans = list1
        while list2:
            if list1.next == None or list1.next.val >= list2.val:
                p = ListNode(list2.val)
                p.next = list1.next
                list1.next = p
                list2 = list2.next
            list1 = list1.next
            
        return ans